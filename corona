#!/bin/bash

# TODO: Redirect errors to stderr
# TODO: Validate input date

WIDTH="0"

# Functions
# 
showHelp() {
  echo
  echo "Usage: $(basename $0) [-h] [FILTERS] [COMMAND] [LOG [LOG 2 [...]]"

  echo
  echo "FILTERS can be one of following:"
  echo "  -a DATETIME - Shows records AFTER specified date in YYYY-MM-DD format"
  echo "  -a DATETIME - Shows records BEFORE specified date in YYYY-MM-DD format"
  echo "  -g GENDER - Shows records based on gender (Can be one of: M(male) or Z(female))"
  echo "  -s [WIDTH] - Shows records as histograms for following commands: gender, age, daily, monthly, yearly, countries, districts, regions. Width can only be an unsigned integer"

  exit 0
}

printErr() {
  echo "$1" 1>&2
  exit 0
}

isValidDate() {
  if [[ $1 =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] && date -d "$1" >/dev/null 2>&1;
    then
      return 0
  fi
  return 1
}

isValidGender() {
  case $1 in
    M|Z)
      return 0 ;;
    *)
      return 1 ;;
  esac
}

# Set default width when not specified
setDefaultWidth() {
  case $1 in 
  gender)       WIDTH="100000"  ;;
  age)          WIDTH="10000"   ;;
  daily)        WIDTH="500"     ;;
  monthly)      WIDTH="10000"   ;;
  yearly)       WIDTH="100000"  ;;
  countries)    WIDTH="100"     ;;
  districts)    WIDTH="1000"    ;;
  regions)      WIDTH="10000"   ;;
  esac
}

# Variables
OPTIND=1
NUMBER_REGEX="^[0-9]+$"

# Filter Variables
AFTER_DATE=""
BEFORE_DATE=""
GENDER=""
COMMAND="merge"

# Handles filters and help command
while getopts ":ha:b:g:s:" opt; do
case "$opt" in
  h) showHelp ;;
  a) if isValidDate "$OPTARG"; 
    then
      AFTER_DATE=$OPTARG
    else
      printErr "Invalid after date"
    fi ;;
  b) if isValidDate "$OPTARG"; 
    then
      BEFORE_DATE=$OPTARG
    else
      printErr "Invalid before date"
    fi ;;
  g) if isValidGender "$OPTARG";
    then
      GENDER=$OPTARG
    else
      printErr "Invalid gender - can be one of: M|Z"
    fi ;;
  s)
    # TODO: When random letters are added and shift is first opt, shift is wrong
    if [[ $OPTARG =~ $NUMBER_REGEX ]] ;
    then
      WIDTH=$OPTARG
    else
      OPTIND=$((OPTIND-1))
    fi
    ;;
  *) ;;
esac
done

shift $((OPTIND - 1))

case "$1" in
  infected)   
    COMMAND="infected" 
    shift ;;
  gender)    
    COMMAND="gender"
    shift ;;
  age)
    COMMAND="age"
    shift ;;
  daily)
    COMMAND="daily"
    shift ;;
  monthly)
    COMMAND="monthly"
    shift ;;
  yearly)
    COMMAND="yearly"    
    shift ;;
  countries)  
    COMMAND="countries" 
    shift ;;
  districts)  
    COMMAND="districts"
    shift ;;
  regions)
    COMMAND="regions"
    shift ;;
esac

if [[ "$WIDTH" -eq "0" ]]; then
  setDefaultWidth "$COMMAND"
fi

RECORDS=""
# Read from files and concat them
for file in "$@"
do
  if [[ -f $file ]]
  then
    case $1 in
      *\.csv)
        RECORDS+="$(cat "$file" | sed 1d)"
        ;;
      *\.gz)
        RECORDS+="$(gzip -d -c "$file" | sed 1d)"
        ;;
      *\.bz2)
        RECORDS+="$(bzip2 -d -c "$file" | sed 1d)"
    esac
  else
    printErr "$1 file does not exist"
  fi
done

# If file was not passed, read from pipeline/stdin
if [ -z "$RECORDS" ]; then
  RECORDS="$(cat - | sed 1d )"
fi

# Replace spaces in records to newline
RECORDS="$(echo "$RECORDS" | tr ' ' '\n')"

# Filters
# Gender filter 
if [ -n "$GENDER" ]; then
  RECORDS="$(echo "$RECORDS" | awk -F, '$4=="'$GENDER'"')"
fi

# After date filter
if [ -n "$AFTER_DATE" ]; then
  RECORDS="$(echo "$RECORDS" | awk -F, '$2 >= "'$AFTER_DATE'"')"
fi

# Before date filter
if [ -n "$BEFORE_DATE" ]; then
  RECORDS="$(echo "$RECORDS" | awk -F, '$2 <= "'$BEFORE_DATE'"')"
fi

# TODO: Compressed files - zip, gz, bz2, String validation in input?

# Commands
case $COMMAND in
  infected)
    echo -n "$RECORDS" | grep -c '^'
    ;;
  merge)
    echo "id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs"
    echo "$RECORDS"
    ;;
  gender)
    MALE="$(echo "$RECORDS" | awk -F, '$4=="M"')"
    FEMALE="$(echo "$RECORDS" | awk -F, '$4=="Z"')"

    echo "M: $(echo -n "$MALE" | grep -c '^')"
    echo "Z: $(echo -n "$FEMALE" | grep -c '^')"
    ;;
  age)
    echo "$RECORDS" | awk -F, 'BEGIN{for (i=0;i<13;i++){age[i]=0}}{
      if ($3 == "") age[12]++
      if ($3 >= 0 && $3 <= 5) age[0]++
      if ($3 >= 6 && $3 <= 15) age[1]++
      if ($3 >= 16 && $3 <= 25) age[2]++
      if ($3 >= 26 && $3 <= 35) age[3]++
      if ($3 >= 36 && $3 <= 45) age[4]++
      if ($3 >= 46 && $3 <= 55) age[5]++
      if ($3 >= 56 && $3 <= 65) age[6]++
      if ($3 >= 66 && $3 <= 75) age[7]++
      if ($3 >= 76 && $3 <= 85) age[8]++
      if ($3 >= 86 && $3 <= 95) age[9]++
      if ($3 >= 96 && $3 <= 105) age[10]++
      if ($3 > 105) age[11]++
    }
    END{ 
      print "0-5   : " age[0]
      print "6-15  : " age[1] 
      print "16-25 : " age[2]
      print "26-35 : " age[3]
      print "36-45 : " age[4]
      print "46-55 : " age[5]
      print "56-65 : " age[6]
      print "66-75 : " age[7]
      print "76-85 : " age[8]
      print "86-95 : " age[9]
      print "96-105: " age[10]
      print ">105  : " age[11]
      if (age[11] != 0) {
        print "None  : " age[12]
      }
      }'
    ;;
  # TODO: add width
  daily)
    echo "$RECORDS" | awk -F, '{count[$2]++} END {for (day in count) print day": "count[day]}' | sort
  ;;
  monthly)
    echo "$RECORDS" | awk -F, '{count[substr($2, 1, 7)]++} END {for (month in count) print month": "count[month]}' | sort
  ;;
  yearly)
    echo "$RECORDS" | awk -F, '{count[substr($2, 1, 4)]++} END {for (year in count) print year": "count[year]}' | sort
  ;;
  countries)
    echo "$RECORDS" | awk -F, '{if ($8 != "CZ" && $8 != "") count[$8]++} END {for (country in count) print country": "count[country]}' | sort
  ;;
  districts)
    echo "$RECORDS" | awk -F, '{count[$6]++} END {for (district in count) 
      if(district != "") {
        print district": "count[district]
      } else {
        print "None: " count[district]
      }}' | sort
  ;;
  regions)
    echo "$RECORDS" | awk -F, '{count[$5]++} END {for (region in count) 
      if(region != "") {
        print region": "count[region]
      } else {
        print "None: " count[region]
      }}' | sort
  ;;
esac